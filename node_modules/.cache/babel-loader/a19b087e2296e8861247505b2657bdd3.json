{"ast":null,"code":"var _jsxFileName = \"/Users/debapriyodas/Downloads/todo-app-master/src/components/Main.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { TYPES } from '../helper/config';\nimport Error from './Error/Error';\nimport TaskForm from './TaskForm/TaskForm';\nimport Modal from './Modal/Modal';\nimport Navbar from './Navbar/Navbar';\nimport TaskList from './TaskList/TaskList';\nimport breakImg from '../assets/Refreshing-amico.svg';\nimport quesImg from '../assets/Questions-pana.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const [taskList, setTaskList] = useState([]);\n  const [selectedType, setSelectedType] = useState('all');\n  const [showModal, setShowModal] = useState(false);\n\n  const loadTasks = () => {\n    const data = JSON.parse(localStorage.getItem('taskList'));\n    if (data !== null && data !== void 0 && data.length) setTaskList(data);\n  };\n\n  const saveTasks = () => {\n    localStorage.setItem('taskList', JSON.stringify(taskList));\n  }; // Load tasks from local storage when app is launched\n\n\n  useEffect(loadTasks, []); // Save tasks in local storage if tasks get changed (also run when it loads)\n\n  useEffect(saveTasks, [taskList]);\n\n  const addTask = task => {\n    setTaskList(prevList => {\n      return [...prevList, task];\n    });\n  };\n\n  const deleteCompletedTasks = () => {\n    setTaskList(prevList => {\n      return prevList.filter(task => !task.completed);\n    });\n  };\n\n  const deleteTask = function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (!id) {\n      setShowModal(true);\n      return;\n    }\n\n    setTaskList(prevList => prevList.filter(task => task.id !== id));\n  };\n\n  const clickTaskHandler = id => {\n    setTaskList(prevTasks => prevTasks.map(task => {\n      return {\n        id: task.id,\n        description: task.description,\n        completed: id === task.id ? !task.completed : task.completed\n      };\n    }));\n  };\n\n  const changeTypeHandler = id => setSelectedType(id);\n\n  const getFilteredTasks = id => {\n    // TYPES = ['all', 'active', 'completed'];\n    if (id === TYPES[0]) return taskList;\n    if (id === TYPES[2]) return taskList.filter(task => task.completed === true);\n    return taskList.filter(task => task.completed !== true);\n  };\n\n  const filteredTasks = getFilteredTasks(selectedType);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      img: quesImg,\n      title: \"Delete all tasks?\",\n      content: \"\\tDeleting all the tasks will permanently remove them from this app\",\n      onConfirm: deleteCompletedTasks,\n      onClose: () => setShowModal(false),\n      closeText: \"No, keep\",\n      confirmText: \"Yes, delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      selected: selectedType,\n      onChangeType: changeTypeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 4\n    }, this), selectedType !== TYPES[2] && /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 34\n    }, this), filteredTasks.length ? /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: filteredTasks,\n      onClickTask: clickTaskHandler,\n      onDeleteTask: deleteTask,\n      showDeleteButton: selectedType === TYPES[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Error, {\n      text: \"There are no tasks\",\n      img: breakImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"+GAWIxVhOfUbPloyAPvAyYFDLu0=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/debapriyodas/Downloads/todo-app-master/src/components/Main.jsx"],"names":["useEffect","useState","TYPES","Error","TaskForm","Modal","Navbar","TaskList","breakImg","quesImg","Main","taskList","setTaskList","selectedType","setSelectedType","showModal","setShowModal","loadTasks","data","JSON","parse","localStorage","getItem","length","saveTasks","setItem","stringify","addTask","task","prevList","deleteCompletedTasks","filter","completed","deleteTask","id","clickTaskHandler","prevTasks","map","description","changeTypeHandler","getFilteredTasks","filteredTasks"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { TYPES } from '../helper/config';\nimport Error from './Error/Error';\nimport TaskForm from './TaskForm/TaskForm';\nimport Modal from './Modal/Modal';\nimport Navbar from './Navbar/Navbar';\nimport TaskList from './TaskList/TaskList';\nimport breakImg from '../assets/Refreshing-amico.svg';\nimport quesImg from '../assets/Questions-pana.svg';\n\nconst Main = () => {\n\tconst [taskList, setTaskList] = useState([]);\n\tconst [selectedType, setSelectedType] = useState('all');\n\tconst [showModal, setShowModal] = useState(false);\n\n\tconst loadTasks = () => {\n\t\tconst data = JSON.parse(localStorage.getItem('taskList'));\n\t\tif (data?.length) setTaskList(data);\n\t};\n\n\tconst saveTasks = () => {\n\t\tlocalStorage.setItem('taskList', JSON.stringify(taskList));\n\t};\n\n\t// Load tasks from local storage when app is launched\n\tuseEffect(loadTasks, []);\n\n\t// Save tasks in local storage if tasks get changed (also run when it loads)\n\tuseEffect(saveTasks, [taskList]);\n\n\tconst addTask = task => {\n\t\tsetTaskList(prevList => {\n\t\t\treturn [...prevList, task];\n\t\t});\n\t};\n\n\tconst deleteCompletedTasks = () => {\n\t\tsetTaskList(prevList => {\n\t\t\treturn prevList.filter(task => !task.completed);\n\t\t});\n\t};\n\n\tconst deleteTask = (id = '') => {\n\t\tif (!id) {\n\t\t\tsetShowModal(true);\n\t\t\treturn;\n\t\t}\n\t\tsetTaskList(prevList => prevList.filter(task => task.id !== id));\n\t};\n\n\tconst clickTaskHandler = id => {\n\t\tsetTaskList(prevTasks =>\n\t\t\tprevTasks.map(task => {\n\t\t\t\treturn {\n\t\t\t\t\tid: task.id,\n\t\t\t\t\tdescription: task.description,\n\t\t\t\t\tcompleted: id === task.id ? !task.completed : task.completed,\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t};\n\n\tconst changeTypeHandler = id => setSelectedType(id);\n\n\tconst getFilteredTasks = id => {\n\t\t// TYPES = ['all', 'active', 'completed'];\n\t\tif (id === TYPES[0]) return taskList;\n\t\tif (id === TYPES[2])\n\t\t\treturn taskList.filter(task => task.completed === true);\n\t\treturn taskList.filter(task => task.completed !== true);\n\t};\n\n\tconst filteredTasks = getFilteredTasks(selectedType);\n\n\treturn (\n\t\t<>\n\t\t\t{showModal && (\n\t\t\t\t<Modal\n\t\t\t\t\timg={quesImg}\n\t\t\t\t\ttitle=\"Delete all tasks?\"\n\t\t\t\t\tcontent=\"\tDeleting all the tasks will permanently remove them from this app\"\n\t\t\t\t\tonConfirm={deleteCompletedTasks}\n\t\t\t\t\tonClose={() => setShowModal(false)}\n\t\t\t\t\tcloseText=\"No, keep\"\n\t\t\t\t\tconfirmText=\"Yes, delete\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<Navbar selected={selectedType} onChangeType={changeTypeHandler} />\n\n\t\t\t{selectedType !== TYPES[2] && <TaskForm onAddTask={addTask} />}\n\n\t\t\t{filteredTasks.length ? (\n\t\t\t\t<TaskList\n\t\t\t\t\ttasks={filteredTasks}\n\t\t\t\t\tonClickTask={clickTaskHandler}\n\t\t\t\t\tonDeleteTask={deleteTask}\n\t\t\t\t\tshowDeleteButton={selectedType === TYPES[2]}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Error text=\"There are no tasks\" img={breakImg} />\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}